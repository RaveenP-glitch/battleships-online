// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Game relationships
  gamesAsPlayer1 Game[] @relation("Player1")
  gamesAsPlayer2 Game[] @relation("Player2")
  ships          Ship[]
  moves          Move[]

  @@map("players")
}

model Game {
  id          String    @id @default(cuid())
  status      GameStatus @default(WAITING_FOR_PLAYER)
  currentTurn String?   // Player ID whose turn it is
  winner      String?   // Player ID of winner
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Players
  player1Id String
  player1   Player @relation("Player1", fields: [player1Id], references: [id], onDelete: Cascade)
  
  player2Id String?
  player2   Player? @relation("Player2", fields: [player2Id], references: [id], onDelete: Cascade)

  // Game data
  ships Ship[]
  moves Move[]

  @@map("games")
}

model Ship {
  id        String   @id @default(cuid())
  type      ShipType
  size      Int
  startX    Int
  startY    Int
  direction Direction
  hits      Int      @default(0)
  sunk      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relationships
  gameId   String
  game     Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  playerId String
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("ships")
}

model Move {
  id        String   @id @default(cuid())
  x         Int
  y         Int
  result    MoveResult
  createdAt DateTime @default(now())

  // Relationships
  gameId   String
  game     Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  playerId String
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  // Ensure each player can only attack each cell once per game
  @@unique([gameId, playerId, x, y])
  @@map("moves")
}

enum GameStatus {
  WAITING_FOR_PLAYER
  PLACING_SHIPS
  IN_PROGRESS
  COMPLETED
}

enum ShipType {
  BATTLESHIP
  DESTROYER
}

enum Direction {
  HORIZONTAL
  VERTICAL
}

enum MoveResult {
  MISS
  HIT
  SUNK
} 